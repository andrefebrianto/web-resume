// Code generated by MockGen. DO NOT EDIT.
// Source: devoratio.dev/web-resume/login/usecase (interfaces: AuthenticationUsecase)

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	model "devoratio.dev/web-resume/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationUsecase is a mock of AuthenticationUsecase interface.
type MockAuthenticationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationUsecaseMockRecorder
}

// MockAuthenticationUsecaseMockRecorder is the mock recorder for MockAuthenticationUsecase.
type MockAuthenticationUsecaseMockRecorder struct {
	mock *MockAuthenticationUsecase
}

// NewMockAuthenticationUsecase creates a new mock instance.
func NewMockAuthenticationUsecase(ctrl *gomock.Controller) *MockAuthenticationUsecase {
	mock := &MockAuthenticationUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthenticationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationUsecase) EXPECT() *MockAuthenticationUsecaseMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationUsecase) Authenticate(arg0 context.Context, arg1, arg2 string) (*model.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationUsecaseMockRecorder) Authenticate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationUsecase)(nil).Authenticate), arg0, arg1, arg2)
}
