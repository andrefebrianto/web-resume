// Code generated by MockGen. DO NOT EDIT.
// Source: devoratio.dev/web-resume/authentication (interfaces: AuthenticationRepository)

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	reflect "reflect"

	model "devoratio.dev/web-resume/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationRepository is a mock of AuthenticationRepository interface.
type MockAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationRepositoryMockRecorder
}

// MockAuthenticationRepositoryMockRecorder is the mock recorder for MockAuthenticationRepository.
type MockAuthenticationRepositoryMockRecorder struct {
	mock *MockAuthenticationRepository
}

// NewMockAuthenticationRepository creates a new mock instance.
func NewMockAuthenticationRepository(ctrl *gomock.Controller) *MockAuthenticationRepository {
	mock := &MockAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationRepository) EXPECT() *MockAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// GetOwnerByUsernameOrEmail mocks base method.
func (m *MockAuthenticationRepository) GetOwnerByUsernameOrEmail(arg0 context.Context, arg1 string) (*model.OwnerAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerByUsernameOrEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.OwnerAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerByUsernameOrEmail indicates an expected call of GetOwnerByUsernameOrEmail.
func (mr *MockAuthenticationRepositoryMockRecorder) GetOwnerByUsernameOrEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerByUsernameOrEmail", reflect.TypeOf((*MockAuthenticationRepository)(nil).GetOwnerByUsernameOrEmail), arg0, arg1)
}
